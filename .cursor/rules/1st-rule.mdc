---
description: 
globs: 
alwaysApply: true
---
# Mixcore Migration Documetory contains the official documentation for the Mixcore migration project from AngularJS to Next.js.

## Documentation Structure

We've organized the documentation into a clear, structured format to make it easier to navigate and find the information you need.

```
mix-app/                    # angulajs source code
docs/
├── [MIGRATION-GUIDE.md](mdc:docs/MIGRATION-GUIDE.md)       # Main entry point and overview
├── guides/                  # Detailed development guides
│   ├── API-GUIDE.md         # API integration guidelines
│   ├── ANGULAR-TO-REACT-PATTERNS.md  # Migration patterns
│   ├── CODING-STANDARDS.md  # Coding standards & best practices
│   └── ...
├── tracking/                # Progress tracking documents
│   ├── IMPLEMENTATION-PLAN.md # Overall implementation plan
│   ├── PROGRESS-TRACKER.md  # Detailed status tracking
│   └── ...
└── reference/               # Reference documentation
    ├── COMPONENT-REGISTRY.md # Component library catalog
    └── ...
```

## Getting Started

If you're new to the project or returning after a break, start with these documents:

1. [Migration Guide](mdc:MIGRATION-GUIDE.md) - Overview of the migration project and current status
2. [Implementation Plan](mdc:tracking/IMPLEMENTATION-PLAN.md) - Current phase and scheduled tasks
3. [Progress Tracker](mdc:tracking/PROGRESS-TRACKER.md) - Detailed status of components and features

## Development Workflow

When working on the migration, follow these steps:

1. Check the [Progress Tracker](mdc:tracking/PROGRESS-TRACKER.md) to understand what's been completed and what's next
2. Consult the [Component Registry](mdc:reference/COMPONENT-REGISTRY.md) to see what components are available for reuse
3. Review the [API Guide](mdc:guides/API-GUIDE.md) if implementing API integration
4. Follow the [Coding Standards](mdc:guides/CODING-STANDARDS.md) for implementation
5. Use the [AngularJS-to-React Patterns](mdc:guides/ANGULAR-TO-REACT-PATTERNS.md) for converting existing components
6. Update the relevant tracking documents as you complete work

## Updating Documentation

As the project evolves, it's important to keep this documentation up to date:

1. Update the [Progress Tracker](mdc:tracking/PROGRESS-TRACKER.md) when components or features are completed
2. Add new components to the [Component Registry](mdc:reference/COMPONENT-REGISTRY.md)
3. Update the [Implementation Plan](mdc:tracking/IMPLEMENTATION-PLAN.md) as phases are completed

## Additional Resources

- [Next.js Documentation](mdc:https:/nextjs.org/docs) - Official Next.js documentation
- [Tailwind CSS Documentation](mdc:https:/tailwindcss.com/docs) - Official Tailwind CSS documentation
- [shadcn/ui Documentation](mdc:https:/ui.shadcn.com/docs) - shadcn/ui component documentation
- [React Hook Form Documentation](mdc:https:/react-hook-form.com/get-started) - Form handling library docs 